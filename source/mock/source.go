// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio-labs/conduit-connector-cosmos-nosql/source (interfaces: Iterator)
//
// Generated by this command:
//
//	mockgen -typed -destination mock/source.go -package mock . Iterator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	gomock "go.uber.org/mock/gomock"
)

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
	isgomock struct{}
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// HasNext mocks base method.
func (m *MockIterator) HasNext(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasNext indicates an expected call of HasNext.
func (mr *MockIteratorMockRecorder) HasNext(arg0 any) *MockIteratorHasNextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockIterator)(nil).HasNext), arg0)
	return &MockIteratorHasNextCall{Call: call}
}

// MockIteratorHasNextCall wrap *gomock.Call
type MockIteratorHasNextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIteratorHasNextCall) Return(arg0 bool, arg1 error) *MockIteratorHasNextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIteratorHasNextCall) Do(f func(context.Context) (bool, error)) *MockIteratorHasNextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIteratorHasNextCall) DoAndReturn(f func(context.Context) (bool, error)) *MockIteratorHasNextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Next mocks base method.
func (m *MockIterator) Next() (opencdc.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(opencdc.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockIteratorMockRecorder) Next() *MockIteratorNextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
	return &MockIteratorNextCall{Call: call}
}

// MockIteratorNextCall wrap *gomock.Call
type MockIteratorNextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIteratorNextCall) Return(arg0 opencdc.Record, arg1 error) *MockIteratorNextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIteratorNextCall) Do(f func() (opencdc.Record, error)) *MockIteratorNextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIteratorNextCall) DoAndReturn(f func() (opencdc.Record, error)) *MockIteratorNextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
